* Bash
** make empty file
   $ touch file.txt

** Queuing processes
   https://superuser.com/a/462673
   $ command1 &
   $ wait; command2-1 && command2-2 &
   $ wait; command3 &
   $ ...

** run if previous command succeed
   https://unix.stackexchange.com/a/22727
   $ previous_command
   $ if [ $? -eq 0 ]; then
   $     next_command
   $ fi

** check if a file exists
   https://stackoverflow.com/a/638980
   $ if [ ! -f /tmp/foo.txt ]; then
   $     echo "File not found!"
   $ fi

* Configuration of ~/.bashrc
  # added by Anaconda3 4.4.0 installer
  export PATH="/home/dhnam/bin/anaconda3/bin:$PATH"
  source activate default  # after installing "conda create -n default python=3 anaconda"
  # alias emacs='emacs25'  # alias emacs='emacs24'

  # CUDA path config
  export PATH=/usr/local/cuda-10.1/bin:$PATH
  export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64:$LD_LIBRARY_PATH

* Ubuntu
** .Trash location
   https://askubuntu.com/questions/102099/where-is-the-trash-folder
   /home/$USER/.local/share/Trash
   or
   /home/$USER/.local/share/Trash/files/

** Upgrade ubuntu version
   type "do-release-upgrade" in shell
   - apt-get update & upgrade may procede

** apt-get
*** update vs upgrade
    You should first run update, then upgrade. Neither of them automatically runs the other.
    https://askubuntu.com/a/94104

** Creating a new user
   $ adduser username

** Add a sudo user to sudo group
   $ usermod -aG sudo username

** Login as another user
   https://askubuntu.com/questions/222984/can-i-log-in-with-other-users-account
   - $ su username
   - $ login username
   - $ sudo -u username

** unicode output setting
   https://emacs.stackexchange.com/questions/10223/how-to-display-unicode-utf-8-as-unicode

   in ~/.basrc:

   # unicode output setting
   # https://emacs.stackexchange.com/questions/10223/how-to-display-unicode-utf-8-as-unicode
   $ LANG=en_EN.UTF8
   $ export LC_ALL=en_US.UTF-8
   $ export LANG=en_US.UTF-8
   $ export LANGUAGE=en_US.UTF-8

** Change hostname
   https://www.cyberciti.biz/faq/ubuntu-change-hostname-command/
   1. Type the following command to edit /etc/hostname using nano or vi text editor:
      $ sudo nano /etc/hostname
      Delete the old name and setup new name.
   2. Next Edit the /etc/hosts file:
      $ sudo nano /etc/hosts
      Replace any occurrence of the existing computer name with your new one.
   3. Reboot the system to changes take effect:
      $ sudo reboot

** Ubuntu version
   https://askubuntu.com/questions/686239/how-do-i-check-the-version-of-ubuntu-i-am-running
   $ lsb_release -a

* Setup
** SSH multiple port
   Modify /etc/ssh/sshd_config:
   ~ Port 22
   ~ Port 61112
   The type follow
   $ sudo service ssh restart

* General commands
** scp example
   $ scp -P 60001 user@domain.name.com:/home/user/some_file ./copied_file

   - '-P' indicate port number
   - directory cannot be copied

** ps
   - list all options
     $ ps --help all
   - show all processes(-e) with full-format(-f)
     $ ps -ef

** alias
   ex)
   $ alias emacs=emacs25
   $ alias emacsclient=emacsclient25
   $ alias ll='ls -A'

   if you write alias in ~/.bashrc, you have to update it by:
   $ source ~/.bashrc

** simple commands
   - <ls -lh> to see the detail sizes of files
   
* Special commands

* NVIDIA GPU & CUDA
** components
   https://eungbean.github.io/2018/08/08/Ubuntu-Installation2-1/
   1. NVIDIA Driver (ex. 390.77)
      $ nvidia-smi  # the version appears at the left upper corner
   2. CUDA toolkits or just CUDA (ex. v9.0)
      $ nvcc --version  # it may be different with the version by nvidia-smi
      $ # the version is determined after setting up CUDA toolkit's path
   3. cuDNN (ex. v7.2.1)
      $ cat /usr/local/cuda-8.0/include/cudnn.h | grep CUDNN_MAJOR -A 2
** quick start
   1. NVIDIA Driver
      install latest NVIDIA Driver by apt (latest NVIDIA Driver can cover all cuda toolkits)
   2. CUDA toolkit
      Download CUDA toolkit as '.run' file
      install CUDA toolkit only, with extraction
      $ sudo sh cuda-10.1.run --silent --toolkit --toolkitpath=/usr/local/cuda-10.1
   3. cuDNN
      download page: https://developer.nvidia.com/rdp/cudnn-download
      - download the version of cuDNN for the corresponding version of  CUDA toolkit
      https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installlinux-tar
      1. Navigate to your <cudnnpath> directory containing the cuDNN Tar file.
      2. Unzip the cuDNN package.
         $ tar -xzvf cudnn-10.1-linux-x64-v7.6.5.32.tgz
      3. Copy the following files into the CUDA Toolkit directory, and change the file permissions.
	 $ sudo cp cuda/include/cudnn.h /usr/local/cuda-10.1/include
	 $ sudo cp cuda/lib64/libcudnn* /usr/local/cuda-10.1/lib64
	 $ sudo chmod a+r /usr/local/cuda-10.1/include/cudnn.h /usr/local/cuda-10.1/lib64/libcudnn*
	 The path of CUDA toolkit and cuDNN should corresponds to "/usr/local/cuda-10.1/"
   4. Update .bashrc for path information
      add following commands to ~/.bashrc
      $ export PATH=/usr/local/cuda-10.1/bin:$PATH
      $ export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64:$LD_LIBRARY_PATH
      
** install guides
*** NVIDIA Driver
    - using GUI: software & updates
      https://eungbean.github.io/2018/08/08/Ubuntu-Installation1/
    - using apt
      https://medium.com/@zhanwenchen/install-cuda-and-cudnn-for-tensorflow-gpu-on-ubuntu-79306e4ac04e
      $ sudo apt-get install nvidia-384 nvidia-modprobe
    - install latest nvidia drivers (in ubuntu 14.04) (it may not working)
      https://www.binarytides.com/install-nvidia-drivers-ubuntu-14-04/

      setup the xorg-edgers ppa
      $ sudo add-apt-repository ppa:xorg-edgers/ppa -y
      $ sudo apt-get update
      
      install a specific driver
      $ sudo apt-get install nvidia-334

      or install the latest version
      $ sudo apt-get install nvidia-current
    - install latest nvidia drivers (another way)
      http://www.linuxandubuntu.com/home/how-to-install-latest-nvidia-drivers-in-linux
      $ sudo apt-get purge nvidia*
      $ sudo add-apt-repository ppa:graphics-drivers
      $ sudo apt-get update
      $ sudo apt-get install nvidia-430
    - minimum driver version
      https://stackoverflow.com/a/30820690

*** CUDA toolkits
    https://eungbean.github.io/2018/08/08/Ubuntu-Installation2-1/

*** Multiple CUDAs (CUDA toolkits)
    https://kaen2891.tistory.com/24
    https://blog.kovalevskyi.com/multiple-version-of-cuda-libraries-on-the-same-machine-b9502d50ae77
    https://eungbean.github.io/2018/08/08/Ubuntu-Installation2-1/
    https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#post-installation-actions
    
    add following commands to ~/.bashrc
    $ export PATH=/usr/local/cuda-8.0/bin:$PATH
    $ export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH

*** CUDA runfile
**** prerequisites
     - disable nouveau
       https://medium.com/@abhiksingla10/installing-cuda-9-2-and-cudnn-7-1-on-ubuntu-16-04-d194cee27cba
     - X-server should be shutdown before installing NVIDIA driver
       https://medium.com/@abhiksingla10/installing-cuda-9-2-and-cudnn-7-1-on-ubuntu-16-04-d194cee27cba
       stop light dm
       https://ericplayground.com/2017/09/26/how-to-stop-and-restart-an-x-server-on-ubuntu/
       $ sudo service lightdm stop
       $ sudo init 3
**** download
     https://developer.nvidia.com/cuda-toolkit-archive
**** extract NVIDIA driver, CUDA installer and CUDA samples from runfile
     https://medium.com/@zhanwenchen/install-cuda-and-cudnn-for-tensorflow-gpu-on-ubuntu-79306e4ac04e
     $ bash ./cuda_*.run --extract=$HOME  # an absolute path

**** install all without extraction
     https://blog.kovalevskyi.com/multiple-version-of-cuda-libraries-on-the-same-machine-b9502d50ae77
     $ sudo sh cuda-9.1.run --silent

     other options:
     --override (https://eungbean.github.io/2018/08/08/Ubuntu-Installation2-1/)

**** install toolkit only, without extraction (recommended)
     https://blog.kovalevskyi.com/multiple-version-of-cuda-libraries-on-the-same-machine-b9502d50ae77
     $ sudo sh cuda-9.1.run --silent --toolkit --toolkitpath=/usr/local/cuda-9.1

**** all options of runfile
     $ sudo sh cuda-9.1.run --help

*** cuDNN install
    https://medium.com/repro-repo/install-cuda-and-cudnn-for-tensorflow-gpu-on-ubuntu-79306e4ac04e
    download page: https://developer.nvidia.com/rdp/cudnn-download
    - download the version of cuDNN for the corresponding version of  CUDA toolkit

    https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installlinux-tar
    1. Navigate to your <cudnnpath> directory containing the cuDNN Tar file.
    2. Unzip the cuDNN package.
       $ tar -xzvf cudnn-10.2-linux-x64-v7.6.5.32.tgz
    3. Copy the following files into the CUDA Toolkit directory, and change the file permissions.
       $ sudo cp cuda/include/cudnn.h /usr/local/cuda/include
       $ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
       $ sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*


** get gpu information
   - Information of 1st GPU
     https://askubuntu.com/a/604167
     $ cat /proc/driver/nvidia/gpus/0000:01:00.0/information
   - NVIDIA diver version and gpu usage
     $ nvidia-smi
   - CUDA version command
     $ nvcc --version

** use cuda with python
   # https://stackoverflow.com/a/34776814
   # https://stackoverflow.com/a/37901914
   $ CUDA_DEVICE_ORDER=PCI_BUS_ID CUDA_VISIBLE_DEVICES= python main.py  # no gpu
   $ CUDA_DEVICE_ORDER=PCI_BUS_ID CUDA_VISIBLE_DEVICES=1 python main.py  # gpu #1
   $ CUDA_DEVICE_ORDER=PCI_BUS_ID CUDA_VISIBLE_DEVICES=0,2 python main.py  # gpu #0 #2
