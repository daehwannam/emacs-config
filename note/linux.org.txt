* Initial setup
  You can refer configuration files in "~/.emacs.d/note/config-scripts/"
  1. Install conda: [[file:conda.org.txt::*Install conda][Install conda]]
     - make the default environment
  2. Install emacs via conda
  3. Emacs config setup
     - Clone emacs-config
       #+begin_src bash
       cd ~
       git clone https://github.com/daehwannam/emacs-config.git
       mv emacs-config ~/.emacs.d
       #+end_src
     - Update "~/.emacs.d/config/options.txt"
       e.g. (machine-id eglot-setup min-elpy-setup miniconda-env python-setup programming basic)
            (machine-id elpy-setup miniconda-env programming basic)
            (machine-id lsp-mode min-elpy-setup miniconda-env programming basic)
     - (Optional) Install elpy: [[file:elpy.org.txt::*Setup][Setup]]
  4. Install tmux via conda
     - copy ~/.tmux.conf from "~/.emacs.d/note/config-scripts/.tmux.conf"
     - (Optional) install logging plugin: [[file:tmux.org.txt::*logging][logging]]
  5. Install screen via conda
     - copy ~/.screenrc from "~/.emacs.d/note/config-scripts/.screenrc"
  6. (Optional) Install the latest nvidia driver: [[*NVIDIA Driver][NVIDIA Driver]]
  7. (Optional) Install cudatoolkit & cudnn: [[*install guides][install guides]]
     1) CUDA driver: [[*manual install][manual install]]
     2) CUDA toolkit
        - Download: [[*download][download]]
        - Install: [[*install toolkit only, without extraction (recommended)][install toolkit only, without extraction (recommended)]]
     3) cuDNN: [[*cuDNN install][cuDNN install]]
     4) path setup: [[*Multiple CUDAs (CUDA toolkits)][Multiple CUDAs (CUDA toolkits)]]
  8. (Optional) Install others via conda
     - git
     - ...

* Bash
** make empty file
   $ touch file.txt

** Queuing processes
   https://superuser.com/a/462673
   $ command1 &
   $ wait; command2-1 && command2-2 &
   $ wait; command3 &
   $ ...

** run if previous command succeed
   https://unix.stackexchange.com/a/22727
   $ previous_command
   $ if [ $? -eq 0 ]; then
   $     next_command
   $ fi

** check if a file exists
   https://stackoverflow.com/a/638980
   $ if [ ! -f /tmp/foo.txt ]; then
   $     echo "File not found!"
   $ fi

** array
   https://opensource.com/article/18/5/you-dont-know-bash-intro-bash-arrays

** command line arguments
   https://tecadmin.net/tutorial/bash-scripting/bash-command-arguments/

** arguments to array
   https://stackoverflow.com/a/12711853
   $ myArray=("$@")

** adding custom commands
   https://unix.stackexchange.com/a/84694
   - make a directory that contains command scripts or executables
     $ mkdir ~/command
   - update ~/.bashrc
     $ export PATH="$HOME/command:$PATH"

     In this case, commands in "$HOME/command" have higher priorities.
     If you want them to have lower priorities:

     $ export PATH="$PATH:$HOME/command"

* Configuration of ~/.bashrc
  # added by Anaconda3 4.4.0 installer
  # export PATH="/home/dhnam/bin/anaconda3/bin:$PATH"
  # source activate default  # after installing "conda create -n default python=3 anaconda"
  # alias emacs='emacs25'  # alias emacs='emacs24'

  # CUDA path config
  export PATH=/usr/local/cuda-10.1/bin:$PATH
  export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64:$LD_LIBRARY_PATH

  # >>> conda initialize >>>
  # !! Contents within this block are managed by 'conda init' !!
  __conda_setup="$('/home/dhnam/program/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
  if [ $? -eq 0 ]; then
      eval "$__conda_setup"
  else
      if [ -f "/home/dhnam/program/anaconda3/etc/profile.d/conda.sh" ]; then
          . "/home/dhnam/program/anaconda3/etc/profile.d/conda.sh"
      else
          export PATH="/home/dhnam/program/anaconda3/bin:$PATH"
      fi
  fi
  unset __conda_setup
  # <<< conda initialize <<<

  export PATH="/home/dhnam/program/anaconda3/envs/default/bin:$PATH"
  source activate default  # after installing "conda create -n default python=3 anaconda"

* Ubuntu
** .Trash location
   https://askubuntu.com/questions/102099/where-is-the-trash-folder
   /home/$USER/.local/share/Trash
   or
   /home/$USER/.local/share/Trash/files/

** Upgrade ubuntu version
   type "do-release-upgrade" in shell
   - apt-get update & upgrade may procede

** apt-get
*** update vs upgrade
    You should first run update, then upgrade. Neither of them automatically runs the other.
    https://askubuntu.com/a/94104

** Creating a new user
   $ sudo adduser username

** Add a sudo user to sudo group
   $ sudo usermod -aG sudo username  # for Ubuntu
   $ usermod -aG wheel username  # for Red Hat

** Login as another user
   https://askubuntu.com/questions/222984/can-i-log-in-with-other-users-account
   - $ su username
   - $ login username
   - $ sudo -u username

** unicode output setting
   https://emacs.stackexchange.com/questions/10223/how-to-display-unicode-utf-8-as-unicode

   in ~/.basrc:

   # unicode output setting
   # https://emacs.stackexchange.com/questions/10223/how-to-display-unicode-utf-8-as-unicode
   $ LANG=en_EN.UTF8
   $ export LC_ALL=en_US.UTF-8
   $ export LANG=en_US.UTF-8
   $ export LANGUAGE=en_US.UTF-8

** Change hostname
   https://www.cyberciti.biz/faq/ubuntu-change-hostname-command/
   1. Type the following command to edit /etc/hostname using nano or vi text editor:
      $ sudo nano /etc/hostname
      Delete the old name and setup new name.
   2. Next Edit the /etc/hosts file:
      $ sudo nano /etc/hosts
      Replace any occurrence of the existing computer name with your new one.
   3. Reboot the system to changes take effect:
      $ sudo reboot

** Ubuntu version
   https://askubuntu.com/questions/686239/how-do-i-check-the-version-of-ubuntu-i-am-running
   $ lsb_release -a

* Utilities
** ssh
*** SSH multiple port setup
    Modify /etc/ssh/sshd_config:
    ~ Port 22
    ~ Port 61112
    Then type as follow:
    $ sudo service ssh restart

** ls
*** Explanation for "ls -l"
   - drwxrwxrwx
     - d : "d"->directory / "-"->file / "l"->link
     - r : read permission
     - w : write permission
     - x : execution permission
     - 1st rwx : owner permission
     - 2nd rwx : group permission
     - 3rd rwx : other permission

   - Permission change examples:
     $ chmod 755 file-name
     $ chmod 711 file-name
     $ chmod 777 file-name

** scp example
   - with port number
     $ scp -P 60001 user@domain.name.com:/home/user/some_file ./copied_file
     - '-P' indicate port number
     - directory cannot be copied
   - copy recursively
     scp -r ./source_directory user@domain.name.com:/home/user/some_directory/
     scp -r ./source_directory user@domain.name.com:/home/user/some_directory/target_directory

** ps
   - list all options
     $ ps --help all
   - show processes made by a user
     $ ps -u user_name
     $ ps -fu dhnam  # with full-format
   - show all processes(-e) with full-format(-f)
     $ ps -ef
   - show all users with processes
     $ ps -ef | awk 'NR>1 {print $1}' | sort -u

     note:
     - NR>1 : skip the first row
     - {print $1} : print the first field

** alias
   ex)
   $ alias emacs=emacs25
   $ alias emacsclient=emacsclient25
   $ alias ll='ls -A'

   if you write alias in ~/.bashrc, you have to update it by:
   $ source ~/.bashrc

** simple commands
   - <ls -lh> to see the detail sizes of files

** df
   show files with human-readable format
   df -h

** du
   - show directory size
     $ sudo du -sh /path/to/dir

   - show files' sizes in the directory
     $ du -sh /path/to/dir/*

     e.g. show each user's directory size
     $ du -sh /home/*

   - show all files' sizes in the current directory
     $ du -hs .[^.]*

** find
*** remove found files
    https://stackoverflow.com/a/41386937
    $ find . -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -delete
*** change permissions of found files
    https://unix.stackexchange.com/a/39133

    e.g. change permissions of files whose names start with .#
    $ find . -type f -name '.#*' -exec chmod +w {} \;

** chmod
   https://en.wikipedia.org/wiki/Chmod

   - change to an executable for the user(owner)
     $ chmod u+x ./path/to/file
   - change to an executable for all the users (recommended)
     $ chmod a+x ./path/to/file
   - you may need shebang(#!) at the top line to indicate a program to run the script
     e.g. #!/bin/bash
     e.g. #!/home/user/program/miniconda3/envs/default/bin/python
     CAUTION: no space is needed between shebang and the program path

** lscpu
   show cpu information
   $ lscpu

** date
   - changing current time manually (sudo is required)
     https://www.sharedit.co.kr/posts/2504

     the format is "월일시간년도.초"

     e.g.
     $ date 031211572018.00
     ==> Mon Mar 12 11:57:00 KST 2018
     $ date
     ==> Mon Mar 12 11:57:02 KST 2018

** mkdir
   - mkdir "all directories in the path" when "directories don't exist"
     $ mkdir -p some/path/to/a/directory

** xdg-open
   This is a command for GUI.
   xdg-open - opens a file or URL in the user's preferred application

   e.g.
   $ xdg-open "example.pdf"

** pskill
   https://stackoverflow.com/a/27820938
   $ pkill -f python
** lsblk
   https://unix.stackexchange.com/a/227458
   Check whether a mounted device, such as sda or sdb, is SDD or HDD:
   $ lsblk -d -o name,rota

   The example output is:
       NAME ROTA
       sda     0
       sdb     0
       sdc     1
   where 1 is HDD(rotational device) and 0 is SDD.
** chown &* chgrp
   Basic usage
   $ chown user some/file/or/directory
   $ chgrp user some/file/or/directory

   Change owner and group of multiple files recursively
   https://superuser.com/a/260939
   $ chown -R user:group file1 file2
** shutdown
   - scheduled shutdown
     https://askubuntu.com/questions/505929/shutdown-after-a-certain-time
     $ date  # to check the current time
     $ sudo shutdown -P 8:30

* NVIDIA GPU & CUDA
** components
   https://eungbean.github.io/2018/08/08/Ubuntu-Installation2-1/
   1. NVIDIA Driver (ex. 390.77)
      $ nvidia-smi  # the version appears at the left upper corner
   2. CUDA toolkits or just CUDA (ex. v9.0)
      $ nvcc --version  # it may be different with the version by nvidia-smi
      $ # the version is determined after setting up CUDA toolkit's path
   3. cuDNN (ex. v7.2.1)
      $ cat /usr/local/cuda-8.0/include/cudnn.h | grep CUDNN_MAJOR -A 2
** quick start
   1. NVIDIA Driver
      install latest NVIDIA Driver by apt (latest NVIDIA Driver can cover all cuda toolkits)
   2. CUDA toolkit
      Download CUDA toolkit as '.run' file
      install CUDA toolkit only, without extraction
      $ sudo sh cuda-10.1.run --silent --toolkit --toolkitpath=/usr/local/cuda-10.1
   3. cuDNN
      download page: https://developer.nvidia.com/rdp/cudnn-download
      - download the version of cuDNN for the corresponding version of CUDA toolkit
      https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installlinux-tar
      1. Navigate to your <cudnnpath> directory containing the cuDNN Tar file.
      2. Unzip the cuDNN package.
         $ tar -xzvf cudnn-10.1-linux-x64-v7.6.5.32.tgz
      3. Copy the following files into the CUDA Toolkit directory, and change the file permissions.
	 $ sudo cp cuda/include/cudnn.h /usr/local/cuda-10.1/include
	 $ sudo cp cuda/lib64/libcudnn* /usr/local/cuda-10.1/lib64
	 $ sudo chmod a+r /usr/local/cuda-10.1/include/cudnn.h /usr/local/cuda-10.1/lib64/libcudnn*
	 The path of CUDA toolkit and cuDNN should corresponds to "/usr/local/cuda-10.1/"
   4. Update .bashrc for path information
      add following commands to ~/.bashrc
      $ export PATH=/usr/local/cuda-10.1/bin:$PATH
      $ export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64:$LD_LIBRARY_PATH
** CUDA path
   conventionally, /usr/local/cuda-x.x is used for CUDA path.
   However, each user's local directory can be used as CUDA directory
   e.g.
     https://blog.csdn.net/weixin_41278720/article/details/81255265
     export PATH=$HOME/cuda-10.2/bin:$PATH
     export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/cuda-10.2/lib64/
      
** install guides
*** NVIDIA Driver
    - using GUI: software & updates
      https://eungbean.github.io/2018/08/08/Ubuntu-Installation1/
    - using apt
      https://medium.com/@zhanwenchen/install-cuda-and-cudnn-for-tensorflow-gpu-on-ubuntu-79306e4ac04e
      $ sudo apt-get install nvidia-384 nvidia-modprobe
    - install latest nvidia drivers (in ubuntu 14.04) (it may not working)
      https://www.binarytides.com/install-nvidia-drivers-ubuntu-14-04/

      setup the xorg-edgers ppa
      $ sudo add-apt-repository ppa:xorg-edgers/ppa -y
      $ sudo apt-get update
      
      install a specific driver
      $ sudo apt-get install nvidia-334

      or install the latest version
      $ sudo apt-get install nvidia-current
    - install latest nvidia drivers (another way)
      http://www.linuxandubuntu.com/home/how-to-install-latest-nvidia-drivers-in-linux
      $ sudo apt-get purge nvidia*
      $ sudo add-apt-repository ppa:graphics-drivers
      $ sudo apt-get update
      $ sudo apt-get install nvidia-430
    - minimum driver version
      https://stackoverflow.com/a/30820690
**** manual install
     - download .run file from NVIDIA site
     - remove existing nvidia drivers
       $ sudo apt-get remove --purge nvidia-*
     - install the new nvidia driver
       $ sudo service lightdm stop ## if you are using 11.04 replace `lightdm` with `gdm`
       $ sudo sh NVIDIA-Linux-x86_64-285.05.09.run
     - reboot
**** Disabling nouveau kernel driver
     https://askubuntu.com/a/951892
     1. Open https://askubuntu.com/a/951892
     2. Write the following scripts:
        #+begin_src
        blacklist nouveau
        options nouveau modeset=0
        #+end_src
     3. sudo update-initramfs -u
     4. reboot

*** CUDA toolkits
    https://eungbean.github.io/2018/08/08/Ubuntu-Installation2-1/

**** Check globally installed CUDAs
     $ ls -d /usr/local/cuda-*/

**** Multiple CUDAs (CUDA toolkits)
     https://kaen2891.tistory.com/24
     https://blog.kovalevskyi.com/multiple-version-of-cuda-libraries-on-the-same-machine-b9502d50ae77
     https://eungbean.github.io/2018/08/08/Ubuntu-Installation2-1/
     https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#post-installation-actions
    
     add following commands to ~/.bashrc
     $ export PATH=/usr/local/cuda-8.0/bin:$PATH
     $ export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH

**** CUDA runfile
***** prerequisites
      - disable nouveau
	https://medium.com/@abhiksingla10/installing-cuda-9-2-and-cudnn-7-1-on-ubuntu-16-04-d194cee27cba
      - X-server should be shutdown before installing NVIDIA driver
	https://medium.com/@abhiksingla10/installing-cuda-9-2-and-cudnn-7-1-on-ubuntu-16-04-d194cee27cba
	stop light dm
	https://ericplayground.com/2017/09/26/how-to-stop-and-restart-an-x-server-on-ubuntu/
	$ sudo service lightdm stop
	$ sudo init 3
***** download
      https://developer.nvidia.com/cuda-toolkit-archive
***** extract NVIDIA driver, CUDA installer and CUDA samples from runfile
      https://medium.com/@zhanwenchen/install-cuda-and-cudnn-for-tensorflow-gpu-on-ubuntu-79306e4ac04e
      $ bash ./cuda_*.run --extract=$HOME  # an absolute path

***** install all without extraction
      https://blog.kovalevskyi.com/multiple-version-of-cuda-libraries-on-the-same-machine-b9502d50ae77
      $ sudo sh cuda-9.1.run --silent

      other options:
      --override (https://eungbean.github.io/2018/08/08/Ubuntu-Installation2-1/)

***** install toolkit only, without extraction (recommended)
      https://blog.kovalevskyi.com/multiple-version-of-cuda-libraries-on-the-same-machine-b9502d50ae77
      $ sudo sh cuda-9.1.run --silent --toolkit --toolkitpath=/usr/local/cuda-9.1

***** all options of runfile
      $ sudo sh cuda-9.1.run --help

*** cuDNN install
    https://medium.com/repro-repo/install-cuda-and-cudnn-for-tensorflow-gpu-on-ubuntu-79306e4ac04e
    download page: https://developer.nvidia.com/rdp/cudnn-download
    - download .tgz file rather than .deb file
    - download the version of cuDNN for the corresponding version of CUDA toolkit

    https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installlinux-tar
    1. Navigate to your <cudnnpath> directory containing the cuDNN Tar file.
    2. Unzip the cuDNN package.
       $ tar -xzvf cudnn-10.2-linux-x64-v7.6.5.32.tgz
    3. Copy the following files into the CUDA Toolkit directory, and change the file permissions.
       $ sudo cp cuda/include/cudnn.h /usr/local/cuda-10.2/include
       $ sudo cp cuda/lib64/libcudnn* /usr/local/cuda-10.2/lib64
       $ sudo chmod a+r /usr/local/cuda-10.2/include/cudnn.h /usr/local/cuda-10.2/lib64/libcudnn*

*** Install CUDA toolkit and cuDNN via conda
    $ conda install -c anaconda cudatoolkit=10.2
    $ conda install -c nvidia nvcc_linux-64
    $ conda install -c anaconda cudnn
**** conda cudatoolkit vs nvidia cudatoolkit
     https://programmersought.com/article/60204317600/

     "cudatoolkit installed by conda install is only a subset of the
     cudatoolkit provided by NVIDIA, and usually only contains the
     runtime environment required by deep learning frameworks such as
     PyTorch and TensorFlow, that is, runtime lib, but there is no
     nvcc."

     - also, conda cudatoolkit include cudnn files such as "libcudnn.so"
**** conda nvcc_linux-64
     Conda nvcc_linux-64 package has several versions.
     However, the version is not corresponding to actual that of nvcc

     When I installed it by
     $ conda install -c nvidia nvcc_linux-64=10.0

     The installed nvcc had version 10.2
     $ which nvcc
     $ nvcc -V

** get gpu information
   - Information of 1st GPU
     https://askubuntu.com/a/604167
     $ cat /proc/driver/nvidia/gpus/0000:01:00.0/information
   - NVIDIA diver version and gpu usage
     $ nvidia-smi
   - Detailed information with nvidia-smi
     $ nvidia-smi -q  # https://askubuntu.com/questions/5417/how-to-get-the-gpu-info/929163#929163
   - CUDA version command
     $ nvcc --version

** use cuda with python
   # https://stackoverflow.com/a/34776814
   # https://stackoverflow.com/a/37901914
   $ CUDA_DEVICE_ORDER=PCI_BUS_ID CUDA_VISIBLE_DEVICES= python main.py  # no gpu
   $ CUDA_DEVICE_ORDER=PCI_BUS_ID CUDA_VISIBLE_DEVICES=1 python main.py  # gpu #1
   $ CUDA_DEVICE_ORDER=PCI_BUS_ID CUDA_VISIBLE_DEVICES=0,2 python main.py  # gpu #0 #2

** gpustat
   - Install
     $ conda install -c conda-forge gpustat
   - Show GPU usage with users and process IDs

** monitoring GPUs of remote servers
   https://github.com/mseitzer/gpu-monitor
