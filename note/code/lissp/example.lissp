
;;; prelude objects from itertools and make basic macros accessible
(hissp.basic.._macro_.prelude)

(progn
  ;; use operators
  (.__setitem__ (globals) '+ operator..add) ; (define + operator..add)
  (.__setitem__ (globals) '* operator..mul))

(progn
  ;; if injection macro .# is not used, macro 'alias' doesn't take effect until this progn form is done.
  ;; So, .# should be used or 'alias' should be located before this progn form.
  .#(alias op/ operator..)
  (print (op/#add 1 2)))

(progn
  ;; function definition
  (define func (lambda (x) x))
  (print (func (+ 10 10))))

(defmacro defun (name params body)
  `(define ,name (lambda ,params ,body)))

(defun make-tuple (: :* args)
  args)

(defun make-list (: :* args)
  (list args))

(print (make-tuple -10 (lambda (x) x) 10))

(progn
  ;; Injection macro .#
  ;;
  ;; It evaluates a form at read time:
  ;; https://hissp.readthedocs.io/en/latest/tutorial.html#reader-macros
  ;;
  ;; It's also similar to "Sharpsign Dot" reader macro of Common Lisp:
  ;; http://www.lispworks.com/documentation/HyperSpec/Body/02_dhf.htm

  .#(defmacro do-twice (x)
      `(progn ,x ,x))

  .#(defmacro do-4times (x)
      (do-twice (print "defining do-4times"))
      `(progn (do-twice ,x) (do-twice ,x)))

  (do-4times (print "Hi")))
