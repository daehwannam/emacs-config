
* Python execution
** run string input (-c)
   $ python -c 'import torch; print(torch.__version__)'
** run string input with echo
   echo -e "for i in range(3):\n    print(i)" | python
   echo -e "import nltk\nnltk.download('averaged_perceptron_tagger')\nnltk.download('wordnet')" | python
** python run file as module (-m)
   $ python -m pack1.pack2.module  # pack1/pack2/module.py is the module's path

   this code can execute the block of __main__ in "module.py"

* Python language
** tail call optimization
*** code
   - https://github.com/Bogdanp/tcopy/tree/master/tcopy
   - http://code.activestate.com/recipes/474088-tail-call-optimization-decorator/
   - https://chrispenner.ca/posts/python-tail-recursion
*** discussion
   - https://www.reddit.com/r/Python/comments/96i85o/convenient_tail_call_elimination_decorator_for/

** python2 to python3
   $ 2to3 -w example.py [or directory]

   if you don't want to make backup files:
   $ 2to3 -wn example.py [or directory]

** typing
*** traverse types
    - typing.get_origin
    - typing.get_args
    https://stackoverflow.com/questions/38703556/unpacking-pythons-type-annotations

** AST
*** AST example
    https://stackoverflow.com/a/41801728
    #+begin_src python
    import ast
    tree = ast.parse("print('Hello Python!!')")
    print(ast.dump(tree))
    exec(compile(tree, filename="<ast>", mode="exec"))
    #+end_src

* Hy language
** emacs hy-mode
   https://github.com/hylang/hy-mode
*** install
**** hy
     - specific version
       $ python -m pip install hy==0.18.0
     - stable version(0.17.0): https://github.com/hylang/hy
       $ pip3 install hy
       or 
       $ pip3 install --user hy  # install scripts in /home/dhnam/.local/bin/
     - latest master version: https://docs.hylang.org/en/stable/quickstart.html
       $ pip install git+https://github.com/hylang/hy.git
**** jedhy
     https://github.com/ekaschalk/jedhy
     $ pip install jedhy  # it may be installed without virtual env (with base python)
*** note
**** tuple unpacking
     https://groups.google.com/forum/#!searchin/hylang-discuss/unpacking%7Csort:date/hylang-discuss/zk4Ck3fU4pA/F1gr4C09BAAJ
     (setv [x y z _ _] [1 2 3 4 5])
     (setv [a b #* rest] (range 5))
**** complex slicing
     https://groups.google.com/forum/m/#!topic/hylang-discuss/gDWb_sSD1CQ
     https://groups.google.com/forum/#!searchin/lisp-korea/hy%7Csort:date/lisp-korea/qgWO5jVNDmA/Bjl8NIdNAwAJ

     - Python
     >>> from numpy import *
     >>> a = arange(24).reshape(2,3,4)
     >>> a
     array([[[ 0,  1,  2,  3],
             [ 4,  5,  6,  7],
             [ 8,  9, 10, 11]],
     
            [[12, 13, 14, 15],
             [16, 17, 18, 19],
             [20, 21, 22, 23]]])
     >>> a[:,0,0]
     array([ 0, 12])
     >>> a[0,::-1, -1]
     array([11,  7,  3])
     >>>

     - Hy
     >>> (import [numpy [*]])
     >>> (setv a (.reshape (arange 24) 2 3 4))
     >>> (get a (, (slice None) 0 0))
     >>> (get a (, 0 (slice None None -1) -1))
** get sub items from collections
*** built-in
    - first
    - last
    - rest
    - some (conditional)
*** hy core
    - butlast
    - second
    - drop
    - drop-last
    - drop-while
    - take
    - take-nth
    - take-while
** hydimatic
   - pretty print
     https://github.com/hylang/hy/issues/914
** type annotation
   Hy's type annotation is similar to that of Clojure
   https://github.com/hylang/hy/issues/640
   https://ask.clojure.org/index.php/8993/where-to-place-function-return-type-hints
   https://docs.python.org/3/library/typing.html
*** example 1
    #+begin_src hy
(defn repeat-string ^(of list str) [^str s ^int n]
  (* [s] n))   
    #+end_src
    #+begin_src python
def repeat_string(s: str, n: int) ->list[str]:
    return [s] * n
    #+end_src
*** example 2
    #+begin_src hy
(setv ^(of dict str (of list int)) num-list-dict
      {"abc" [1 2 3] "xyz" [4 5 6]})
    #+end_src
    #+begin_src python
num_list_dict: dict[str, list[int]] = {'abc': [1, 2, 3], 'xyz': [4, 5, 6]}
    #+end_src

* pip
** command
   $ python -m pip [command] [args]
** examples
   - version check
     https://stackoverflow.com/a/26664162/6710003
     $ python -m pip install stanfordnlp==
   - install specified version
     $ python -m pip install stanfordnlp==0.2.0
** setup
   - install from a local directory
     $ pip install /path/to/directory
   - setup with editable
     https://stackoverflow.com/a/35064498
     https://stackoverflow.com/questions/15031694/installing-python-packages-from-local-file-system-folder-to-virtualenv-with-pip/20043907#20043907

     It installs a package with the directory path, then the directory becomes the source of package.
     When the code in the directory is chaged, the package is also changed.

     e.g.
     $ pip install --editable path/to/package
     $ pip install --editable .  # current directory

* pdb
** pdb command
   $ python -m pdb example.py
   or
   $ pdb example.py  # this command requires pdb setup for different environments
** pdb setting for conda environments
   https://stackoverflow.com/questions/38346577/debuggin-with-pdb-within-a-conda-environment
   1. source activate py3
   2. find pdb path by "$ which pdb" for python2 or "$ which pdb3" for Python3
      ex) /usr/bin/pdb or /usr/bin/pdb3
   3. find python path by "$ which python"
      ex) /home/dhnam/program/anaconda3/envs/py3/bin/python
   4. copy /usr/bin/pdb or pdb3 to /home/dhnam/program/anaconda3/envs/py3/bin/pdb
   5. then open /home/dhnam/program/anaconda3/envs/py3/bin/pdb
   6. change shebang
      ex) /home/dhnam/program/anaconda3/envs/py3/bin/python

    in this example, pyvenv-workon should be applied for "py3"
** debugging without pdb.py
   https://realpython.com/python-debugging-pdb/
   - use <breakpoint()>

** interact command
   https://stackoverflow.com/a/35302880
   'interact' command enables to execute generators with 'self' objects

*** ignoring breakpoints
    $ PYTHONBREAKPOINT=0 python main.py

* Other packages
** Spacy
   $ conda install -c conda-forge spacy  # spacy-2.2.3
   $ conda install -c conda-forge spacy-lookups-data  # spacy-lookups-data-0.2.0
   $ python -m spacy download en_core_web_sm  # en-core-web-sm-2.2.5

** NLTK
*** setup
    >>> import nltk
    >>> nltk.download('averaged_perceptron_tagger')  # pos_tag
    >>> nltk.download('wordnet')
    >>> nnltk.download('punkt')  # tokenizer

    or 

    $ echo -e "import nltk\nnltk.download('averaged_perceptron_tagger')\nnltk.download('wordnet')" | python
    $ echo -e "import nltk\nnltk.download('punkt')" | python
*** download path
    >>> import nltk
    >>> nltk.data.path

** unicode
   https://stackoverflow.com/a/35536228

* IPython
** Convert ipython notebook file(.ipynb) to python file(.py)
   https://stackoverflow.com/a/37799207
   $ jupyter nbconvert --to script 'my-notebook.ipynb'

* unittest
  https://m.blog.naver.com/wideeyed/221841799910
